"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Å–≤—ñ—á–æ–∫
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from datetime import datetime
import os
import sys
import json

class ChartDisplay:
    """
    –ö–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Å–≤—ñ—á–æ–∫
    """
    
    def __init__(self, data_path):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞
        
        Args:
            data_path (str): –®–ª—è—Ö –¥–æ parquet —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏
        """
        self.data_path = data_path
        self.data = None
        self.fig = None
        self.load_data()
    
    def load_data(self):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ parquet —Ñ–∞–π–ª—É
        """
        try:
            print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑: {self.data_path}")
            self.data = pd.read_parquet(self.data_path)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
            print(f"–†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: {self.data.shape}")
            print(f"–ö–æ–ª–æ–Ω–∫–∏: {self.data.columns.tolist()}")
            
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –Ω–∞ datetime
            if 'open_time' in self.data.columns:
                self.data['open_time'] = pd.to_datetime(self.data['open_time'])
                self.data.set_index('open_time', inplace=True)
            elif 'close_time' in self.data.columns:
                self.data['close_time'] = pd.to_datetime(self.data['close_time'])
                self.data.set_index('close_time', inplace=True)
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
            self.data.sort_index(inplace=True)
            
            print(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
            print(f"üìä –†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: {self.data.shape}")
            print(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {self.data.index[0]} - {self.data.index[-1]}")
            print(f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {self.data['close_price'].min():.4f} - {self.data['close_price'].max():.4f}")
            print(f"üìà –ü–µ—Ä—à–∞ —Å–≤—ñ—á–∫–∞: O={self.data['open_price'].iloc[0]:.4f}, H={self.data['high_price'].iloc[0]:.4f}, L={self.data['low_price'].iloc[0]:.4f}, C={self.data['close_price'].iloc[0]:.4f}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            sys.exit(1)
    
    def create_candlestick_chart(self):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ candlestick –≥—Ä–∞—Ñ—ñ–∫–∞
        """
        if self.data is None:
            print("–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∏
        self.fig = make_subplots(
            rows=2, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.03,
            subplot_titles=('–¶—ñ–Ω–∞ XRP/USDT', '–û–±—Å—è–≥'),
            row_width=[0.7, 0.3]
        )
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        x_data = self.data.index.tolist()
        open_data = self.data['open_price'].tolist()
        high_data = self.data['high_price'].tolist()
        low_data = self.data['low_price'].tolist()
        close_data = self.data['close_price'].tolist()
        
        # –î–æ–¥–∞—î–º–æ candlestick –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        candlestick_trace = go.Candlestick(
            x=x_data,
            open=open_data,
            high=high_data,
            low=low_data,
            close=close_data,
            name='XRP/USDT',
            increasing_line_color='#26A69A',
            decreasing_line_color='#EF5350',
            increasing_fillcolor='#26A69A',
            decreasing_fillcolor='#EF5350',
            line=dict(width=1),
            showlegend=True,
            visible=True
        )
        
        self.fig.add_trace(candlestick_trace, row=1, col=1)
        
        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ candlestick –¥–∞–Ω–∏—Ö
        print(f"üìä Candlestick –¥–∞–Ω—ñ:")
        print(f"   - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫: {len(self.data)}")
        print(f"   - –ü–µ—Ä—à–∞ —Å–≤—ñ—á–∫–∞: O={self.data['open_price'].iloc[0]:.4f}, H={self.data['high_price'].iloc[0]:.4f}, L={self.data['low_price'].iloc[0]:.4f}, C={self.data['close_price'].iloc[0]:.4f}")
        print(f"   - –û—Å—Ç–∞–Ω–Ω—è —Å–≤—ñ—á–∫–∞: O={self.data['open_price'].iloc[-1]:.4f}, H={self.data['high_price'].iloc[-1]:.4f}, L={self.data['low_price'].iloc[-1]:.4f}, C={self.data['close_price'].iloc[-1]:.4f}")
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Å—è–≥
        if 'volume' in self.data.columns:
            volume_data = self.data['volume'].tolist()
            self.fig.add_trace(
                go.Bar(
                    x=x_data,
                    y=volume_data,
                    name='–û–±—Å—è–≥',
                    marker_color='#42A5F5',
                    opacity=0.7,
                    showlegend=True
                ),
                row=2, col=1
            )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–µ–π
        self.fig.update_xaxes(
            title_text="–ß–∞—Å",
            rangeslider_visible=False,
            row=2, col=1
        )
        
        self.fig.update_yaxes(
            title_text="–¶—ñ–Ω–∞ (USDT)",
            row=1, col=1
        )
        
        self.fig.update_yaxes(
            title_text="–û–±—Å—è–≥",
            row=2, col=1
        )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è layout
        self.fig.update_layout(
            title={
                'text': 'XRP/USDT - TradingView-–ø–æ–¥—ñ–±–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 20}
            },
            xaxis_rangeslider_visible=False,
            height=800,
            showlegend=True,
            template='plotly_dark',
            hovermode='x unified'
        )
    
    def add_technical_indicators(self):
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        """
        if self.data is None or self.fig is None:
            return
        
        try:
            # –ü—Ä–æ—Å—Ç–∏–π –∫–æ–≤–∑–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π (SMA) –Ω–∞ –æ—Å–Ω–æ–≤—ñ close_price
            close_prices = self.data['close_price']
            
            # SMA 20
            sma_20 = close_prices.rolling(window=20).mean()
            sma_20_data = sma_20.tolist()
            self.fig.add_trace(
                go.Scatter(
                    x=x_data,
                    y=sma_20_data,
                    name='SMA 20',
                    line=dict(color='#FF9800', width=2),
                    opacity=0.8
                ),
                row=1, col=1
            )
            
            # SMA 50
            sma_50 = close_prices.rolling(window=50).mean()
            sma_50_data = sma_50.tolist()
            self.fig.add_trace(
                go.Scatter(
                    x=x_data,
                    y=sma_50_data,
                    name='SMA 50',
                    line=dict(color='#9C27B0', width=2),
                    opacity=0.8
                ),
                row=1, col=1
            )
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}")
    
    def add_tradingview_features(self):
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è TradingView-–ø–æ–¥—ñ–±–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        """
        if self.fig is None:
            return
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è hover —á–µ—Ä–µ–∑ layout (–¥–ª—è candlestick)
        self.fig.update_layout(
            hovermode='x unified',
            hoverlabel=dict(
                bgcolor="rgba(0,0,0,0.8)",
                font_size=12,
                font_family="Arial"
            )
        )
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        self.fig.update_layout(
            updatemenus=[
                dict(
                    type="buttons",
                    direction="left",
                    pad={"r": 10, "t": 87},
                    showactive=False,
                    x=0.1,
                    xanchor="right",
                    y=0,
                    yanchor="top",
                    buttons=list([
                        dict(
                            args=[{"xaxis.range": [self.data.index[0], self.data.index[-1]]}],
                            label="–í–µ—Å—å –ø–µ—Ä—ñ–æ–¥",
                            method="relayout"
                        ),
                        dict(
                            args=[{"xaxis.range": [self.data.index[-100], self.data.index[-1]]}],
                            label="–û—Å—Ç–∞–Ω–Ω—ñ 100 —Å–≤—ñ—á–æ–∫",
                            method="relayout"
                        ),
                        dict(
                            args=[{"xaxis.range": [self.data.index[-50], self.data.index[-1]]}],
                            label="–û—Å—Ç–∞–Ω–Ω—ñ 50 —Å–≤—ñ—á–æ–∫",
                            method="relayout"
                        )
                    ])
                )
            ]
        )
    
    def get_chart_json(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å—ñ—ó
        """
        if self.fig is None:
            self.create_candlestick_chart()
            self.add_technical_indicators()
            self.add_tradingview_features()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ to_json() –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return self.fig.to_json(validate=False, pretty=False)
    
    def get_data_info(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∞–Ω—ñ
        """
        if self.data is None:
            return None
        
        return {
            'shape': self.data.shape,
            'columns': self.data.columns.tolist(),
            'first_date': str(self.data.index[0]),
            'last_date': str(self.data.index[-1]),
            'total_candles': len(self.data)
        }

def create_chart_display(data_path):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ ChartDisplay
    
    Args:
        data_path (str): –®–ª—è—Ö –¥–æ parquet —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏
        
    Returns:
        ChartDisplay: –ï–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É ChartDisplay
    """
    return ChartDisplay(data_path)

if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è
    data_path = "data/spot/1d/XRPUSDT.parquet"
    chart = create_chart_display(data_path)
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è JSON
    chart_json = chart.get_chart_json()
    print(f"‚úÖ JSON –æ—Ç—Ä–∏–º–∞–Ω–æ, —Ä–æ–∑–º—ñ—Ä: {len(chart_json)} —Å–∏–º–≤–æ–ª—ñ–≤")
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∞–Ω—ñ
    data_info = chart.get_data_info()
    print(f"‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ: {data_info}")
