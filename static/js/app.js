// TradingView-–ø–æ–¥—ñ–±–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Å–≤—ñ—á–æ–∫ - JavaScript

let chartData = null;
let isDarkTheme = true;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
async function loadChart() {
    try {
        const response = await fetch('/api/chart');
        if (!response.ok) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        }
        
        chartData = await response.json();
        
        // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö
        console.log('Chart data received:', chartData);
        console.log('Number of traces:', chartData.data.length);
        console.log('Trace types:', chartData.data.map(trace => trace.type));
        
        // –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ candlestick
        const candlestickTrace = chartData.data.find(trace => trace.type === 'candlestick');
        if (candlestickTrace) {
            console.log('Candlestick trace found:', candlestickTrace);
            console.log('Candlestick data length:', candlestickTrace.x ? candlestickTrace.x.length : 'no x data');
            console.log('First candle:', {
                x: candlestickTrace.x ? candlestickTrace.x[0] : 'no x',
                open: candlestickTrace.open ? candlestickTrace.open[0] : 'no open',
                high: candlestickTrace.high ? candlestickTrace.high[0] : 'no high',
                low: candlestickTrace.low ? candlestickTrace.low[0] : 'no low',
                close: candlestickTrace.close ? candlestickTrace.close[0] : 'no close'
            });
        } else {
            console.log('No candlestick trace found!');
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        Plotly.newPlot('chart', chartData.data, chartData.layout, {
            responsive: true,
            displayModeBar: true,
            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d'],
            displaylogo: false
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É –ø–∞–Ω–µ–ª—å
        updateInfoPanel();
        
    } catch (error) {
        document.getElementById('chart').innerHTML = 
            '<div class="error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ' + error.message + '</div>';
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ
function updateInfoPanel() {
    if (!chartData) return;
    
    try {
        const data = chartData.data;
        const candlestickData = data.find(trace => trace.type === 'candlestick');
        
        if (candlestickData && candlestickData.close && Array.isArray(candlestickData.close)) {
            const closePrices = candlestickData.close;
            const lastPrice = closePrices[closePrices.length - 1];
            const firstPrice = closePrices[0];
            
            if (lastPrice && firstPrice && typeof lastPrice === 'number' && typeof firstPrice === 'number') {
                const change = ((lastPrice - firstPrice) / firstPrice * 100).toFixed(2);
                
                document.getElementById('last-price').textContent = '$' + lastPrice.toFixed(4);
                document.getElementById('change-24h').textContent = change + '%';
                document.getElementById('change-24h').style.color = change >= 0 ? '#00d4aa' : '#f44336';
                document.getElementById('candles-count').textContent = closePrices.length;
                
                // –ó–Ω–∞—Ö–æ–¥–∏–º–æ high/low
                if (candlestickData.high && Array.isArray(candlestickData.high) && 
                    candlestickData.low && Array.isArray(candlestickData.low)) {
                    const high = Math.max(...candlestickData.high);
                    const low = Math.min(...candlestickData.low);
                    document.getElementById('high-24h').textContent = '$' + high.toFixed(4);
                    document.getElementById('low-24h').textContent = '$' + low.toFixed(4);
                }
            }
        }
        
        // –û–±—Å—è–≥
        const volumeData = data.find(trace => trace.type === 'bar');
        if (volumeData && volumeData.y && Array.isArray(volumeData.y)) {
            const totalVolume = volumeData.y.reduce((sum, vol) => sum + (vol || 0), 0);
            document.getElementById('volume-24h').textContent = totalVolume.toFixed(0);
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ:', error);
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
function refreshChart() {
    document.getElementById('chart').innerHTML = '<div class="loading">–û–Ω–æ–≤–ª–µ–Ω–Ω—è...</div>';
    loadChart();
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–µ–º–∏
function toggleTheme() {
    isDarkTheme = !isDarkTheme;
    
    if (isDarkTheme) {
        document.body.classList.remove('light-theme');
    } else {
        document.body.classList.add('light-theme');
    }
    
    const themeBtn = document.querySelector('.btn.secondary');
    themeBtn.textContent = isDarkTheme ? 'üåô –¢–µ–º–∞' : '‚òÄÔ∏è –¢–µ–º–∞';
}

// –ï–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ—ñ–∫–∞
function exportChart() {
    if (chartData) {
        const link = document.createElement('a');
        link.download = 'tradingview_chart.html';
        
        const exportHtml = `<!DOCTYPE html>
<html>
<head>
    <title>TradingView Chart Export</title>
    <script src="https://cdn.plot.ly/plotly-2.27.0.min.js"></script>
    <style>
        body { margin: 0; padding: 20px; background: #131722; color: #d1d4dc; }
        #chart { width: 100%; height: 80vh; }
    </style>
</head>
<body>
    <h1>XRP/USDT - TradingView Chart Export</h1>
    <div id="chart"></div>
    <script>
        const chartData = ${JSON.stringify(chartData)};
        Plotly.newPlot('chart', chartData.data, chartData.layout);
    </script>
</body>
</html>`;
        
        link.href = 'data:text/html;charset=utf-8,' + encodeURIComponent(exportHtml);
        link.click();
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    loadChart();
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
    setInterval(updateInfoPanel, 30000);
});
